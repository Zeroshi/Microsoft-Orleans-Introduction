# In order to be able to access the service from outside the cluster, we will need to add a Service object of type LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: orleansbasics
spec:
  type: LoadBalancer
  ports:
  - port: 80
  selector:
    app: orleansbasics
---
# For RBAC-enabled clusters, the Kubernetes service account for the pods may also need to be granted the required access:
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader
rules:
- apiGroups: [ "" ]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader-binding
subjects:
- kind: ServiceAccount
  name: default
  apiGroup: ''
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: ''
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: orleansbasics
  labels:
    app: orleansbasics
spec:
  selector:
    matchLabels:
      app: orleansbasics
  replicas: 3
  template:
    metadata:
      labels:
        app: orleansbasics

        # The serviceId label is used to identify the service to Orleans
        orleans/serviceId: orleansbasics
        # The clusterId label is used to identify an instance of a cluster to Orleans.
        # Typically, this will be the same value as serviceId or any fixed value.
        # In cases where you are not using rolling deployments (for example, blue/green deployments),
        # this value can allow for distinct clusters which do not communicate directly with each other, but which still share the same storage and other resources.
        orleans/clusterId: dev
    spec:
      containers:
        - name: main
          image: orleansbasicsacr1.azurecr.io/orleansbasics
          imagePullPolicy: Always
          ports:

          # Define the ports which Orleans uses
          - containerPort: 11111
          - containerPort: 30000

          # Define the ASP.NET Core ports
          - containerPort: 80
          - containerPort: 443
          env:
          # The Azure Storage connection string for clustering is injected as an environment variable
          # It must be created separately using a command such as:
          # > kubectl create secret generic az-storage-acct --from-file=key=./az-storage-acct.txt
          - name: STORAGE_CONNECTION_STRING
            valueFrom:
              secretKeyRef:
                name: az-storage-acct
                key: key
          # Configure settings to let Orleans know which cluster it belongs to and which pod it is running in
          - name: ORLEANS_SERVICE_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['orleans/serviceId']
          - name: ORLEANS_CLUSTER_ID
            valueFrom:
              fieldRef:
                fieldPath: metadata.labels['orleans/clusterId']
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: DOTNET_SHUTDOWNTIMEOUTSECONDS
            value: "120"
      terminationGracePeriodSeconds: 180
